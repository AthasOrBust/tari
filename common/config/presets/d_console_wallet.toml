########################################################################################################################
#                                                                                                                      #
#                      Wallet Configuration Options (WalletConfig)                                                     #
#                                                                                                                      #
########################################################################################################################

[wallet]
# The buffer size constants for the publish/subscribe connector channel, connecting comms messages to the domain layer:
# (min value = 300, default value = 50000).
#buffer_size = 50000

# The relative path to store persistent data (default = "data/wallet")
#data_dir = "data/wallet"

# The relative folder to store your local key data and transaction history. (default = "db/console_wallet.db")
# DO NOT EVER DELETE THIS FILE unless you (a) have backed up your seed phrase and (b) know what you are doing!
#db_file = "db/console_wallet.db"

# The main wallet db sqlite database backend connection pool size for concurrent reads (default = 16)
#db_connection_pool_size = 16

# Console wallet password. Should you wish to start your console wallet without typing in your password, the following
# options are available:
# 1. Start the console wallet with the --password=secret argument, or
# 2. Set the environment variable MINOTARI_WALLET_PASSWORD=secret before starting the console wallet, or
# 3. Set the "password" key in this [wallet] section of the config
# (default = )
#password = "secret"

# The auto ping interval to use for contacts liveness data (default = 30 s)
#contacts_auto_ping_interval = 30

# How long a contact may be not seen before being determined to be offline (default = 30 s)
#contacts_online_ping_window = 30

# When running the console wallet in command mode, use these values to determine what "stage" and timeout to wait
# for sent transactions.
# The stages are:
# - "DirectSendOrSaf" - The transaction was initiated and was accepted via Direct Send or Store And Forward.
# - "Negotiated" - The recipient replied and the transaction was negotiated.
# - "Broadcast" - The transaction was broadcast to the base node mempool.
# - "MinedUnconfirmed" - The transaction was successfully detected as mined but unconfirmed on the blockchain.
# - "Mined" - The transaction was successfully detected as mined and confirmed on the blockchain.
# The default values are: "Broadcast", 300
#command_send_wait_timeout = 300
#command_send_wait_stage = "Broadcast"

# Wallets currently will choose the best outputs as inputs when spending, however since a lurking base node can
# generate a transaction graph of inputs to outputs with relative ease, a wallet may reveal its transaction
# history by including a (non-stealth address) one-sided payment.
# If set to `true`, then outputs received via simple one-sided transactions, won't be automatically selected as
# further transactions, but can still be selected individually as specific outputs.
#autoignore_onesided_utxos = false

# Set to true to enable grpc. (default = false)
#grpc_enabled = false
# The socket to expose for the gRPC base node server (default = "/ip4/127.0.0.1/tcp/18143")
#grpc_address = "/ip4/127.0.0.1/tcp/18143"
# gRPC authentication method (default = "none")
#grpc_authentication = { username = "admin", password = "xxxx" }

# A custom base node peer that will be used to obtain metadata from, example
# "0eefb45a4de9484eca74846a4f47d2c8d38e76be1fec63b0112bd00d297c0928::/ip4/13.40.98.39/tcp/18189"
# (default = )
#custom_base_node = "none"

# A list of base node peers that the wallet should use for service requests and tracking chain state in the form
# ["public_key::net_address", ...] (default = [])
#base_node_service_peers = []

# The amount of times wallet recovery will be retried before being abandoned (default = 3)
#recovery_retry_limit = 3

# The default uT fee per gram to use for transaction fees (default = 5)
#fee_per_gram = 5

# Number of required transaction confirmations used for UI purposes (default = 3)
#num_required_confirmations = 3

# Spin up and use a built-in Tor instance, only works on macos/linux and must comment out 'tor.control_address' below.
# This requires that the base node was built with the optional "libtor" feature flag. (default = true)
#use_libtor = false

# A path to the file that stores your node identity and secret key (default = "none")
#identity_file = "none"

# Notification script file for a notifier service. Allows you to execute a script or program when these transaction
# events are received by the console wallet (default = "none"):
# - transaction received
# - transaction sent
# - transaction cancelled
# - transaction mined but unconfirmed
# - transaction mined and confirmed
# An example script is available here: applications/minotari_console_wallet/src/notifier/notify_example.sh
#notify_file = "/path/to/script"

# The cool down period between balance enquiry checks in seconds; requests faster than this will be ignored.
# For specialized wallets processing many batch transactions this setting could be increased to 60 s to retain
# responsiveness of the wallet with slightly delayed balance updates (default = 5):
#balance_enquiry_cooldown_period = 5

[wallet.transactions]
# This is the timeout period that will be used for base node broadcast monitoring tasks (default = 30)
broadcast_monitoring_timeout = 180
# This is the timeout period that will be used for chain monitoring tasks (default = 60)
chain_monitoring_timeout = 60
# This is the timeout period that will be used for sending transactions via broadcast mode (default = 60)
broadcast_send_timeout = 180
# This is the timeout period that will be used for low power moded polling tasks (default = 300)
#low_power_polling_timeout = 300
# This is the timeout period that will be used to resend transactions that did not make any progress (default = 600)
#transaction_resend_period = 600
# This is the timeout period that will be used to ignore repeated transactions (default = 300)
#resend_response_cooldown = 300
# This is the timeout period that will be used to expire pending transactions (default = 259200)
#pending_transaction_cancellation_timeout = 259200 # 3 days
# This is the number of block confirmations required for a transaction to be considered completely mined and
# confirmed. (default = 3)
#num_confirmations_required = 3
# The number of batches the unconfirmed transactions will be divided into before being queried from the base node
# (default = 20)
#max_tx_query_batch_size = 20
# This option specifies the transaction routing mechanism as being directly between wallets, making
# use of store and forward or using any combination of these.
# (options: "DirectOnly", "StoreAndForwardOnly", DirectAndStoreAndForward". default: "DirectAndStoreAndForward").
#transaction_routing_mechanism = "DirectAndStoreAndForward"
# This is the size of the event channel used to communicate transaction status events to the wallet's UI. A busy console
# wallet doing thousands of bulk payments or used for stress testing needs a fairly big size (>10000) (default = 1000).
transaction_event_channel_size = 25000
# This is the timeout period that will be used to re-submit transactions not found in the mempool (default = 600)
#transaction_mempool_resubmission_window = 600

[wallet.outputs]
# If a large amount of tiny valued uT UTXOs are used as inputs to a transaction, the fee may be larger than the
# transaction amount. Set this value to `false` to allow spending of "dust" UTXOs for small valued transactions
# (default = true).
prevent_fee_gt_amount = false
# Ignores dust below this value, value in micro MinoTari, defaults to 100
# dust_ignore_value: 100,
# This is the size of the event channel used to communicate output manager events to the wallet. A busy console
# wallet doing thousands of bulk payments or used for stress testing needs a fairly big size (>3000) (default = 250).
event_channel_size = 3500
# The number of confirmations (difference between tip height and mined height) required for the output to be marked as
# mined confirmed (default = 3)
#num_confirmations_required = 3
# The number of batches the unconfirmed outputs will be divided into before being queried from the base node
# (default = 100)
#tx_validator_batch_size = 100
# Number of seconds that have to pass for the wallet to run revalidation of invalid UTXOs on startup.
# If you set it to zero, the revalidation will be on every wallet rerun. Default is 3 days.
#num_of_seconds_to_revalidate_invalid_utxos = 259200


[wallet.base_node]
# Configuration for the wallet's base node service
# The refresh interval
#base_node_monitor_max_refresh_interval = 30
# The RPC client pool size  (default = 5)
#base_node_rpc_pool_size = 5
# This is the size of the event channel used to communicate base node events to the wallet. (default = 250).
#event_channel_size = 250

[wallet.p2p]
# The node's publicly-accessible hostname. This is the host name that is advertised on the network so that
# peers can find you.
# _NOTE_: If using the `tor` transport type, public_address will be ignored and an onion address will be
# automatically configured
#public_addresses = ["/ip4/172.2.3.4/tcp/18188",]

# Optionally bind an additional TCP socket for inbound Tari P2P protocol commms.
# Use cases include:
# - allowing wallets to locally connect to their base node, rather than through tor, when used in conjunction with
#   `tor_proxy_bypass_addresses`
# - multiple P2P addresses, one public over DNS and one private over TOR
# - a "bridge" between TOR and TCP-only nodes
#auxiliary_tcp_listener_address = "/ip4/127.0.0.1/tcp/9998"

# Path to the LMDB data files
#datastore_path = "peer_db"

# Name to use for the peer database
#peer_database_name = "peers"

# The maximum number of concurrent Inbound tasks allowed before back-pressure is applied to peers
#max_concurrent_inbound_tasks = 4

# The maximum number of concurrent outbound tasks allowed before back-pressure is applied to outbound messaging queue
#max_concurrent_outbound_tasks = 4

# Set to true to allow peers to provide test addresses (loopback, memory etc.). If set to false, memory
# addresses, loopback, local-link (i.e addresses used in local tests) will not be accepted from peers. This
# should always be false for non-test nodes.
#allow_test_addresses = false

# CIDR for addresses allowed to enter into liveness check mode on the listener.
#listener_liveness_allowlist_cidrs = []
# Enables periodic socket-level liveness checks. Default: Disabled
# listener_self_liveness_check_interval = 15

# User agent string for this node
#user_agent = ""

# The maximum simultaneous comms RPC sessions allowed (default value = 100). Setting this to -1 will allow unlimited
# sessions.
#rpc_max_simultaneous_sessions = 100
# The maximum comms RPC sessions allowed per peer (default value = 10).
#rpc_max_sessions_per_peer = 10
#rpc_max_sessions_per_peer = 10
# If true, and the maximum per peer RPC sessions is reached, the RPC server will close an old session and replace it
# with a new session. If false, the RPC server will reject the new session and preserve the older session.
# (default value = true).
#pub cull_oldest_peer_rpc_connection_on_full = true

